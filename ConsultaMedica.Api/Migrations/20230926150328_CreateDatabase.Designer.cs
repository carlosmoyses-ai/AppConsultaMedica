// <auto-generated />
using System;
using ConsultaMedica.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsultaMedica.Api.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20230926150328_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("ConsultaMedica.Api.Models.ConsultaModel", b =>
                {
                    b.Property<int>("ConsultaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataHoraFim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("MedicoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecepcionistaModelRecepcionistaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoConsulta")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultaId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("RecepcionistaModelRecepcionistaId");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("ConsultaMedica.Api.Models.EspecialidadeModel", b =>
                {
                    b.Property<int>("EspecialidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EspecialidadeDescricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("EspecialidadeNome")
                        .HasColumnType("TEXT");

                    b.HasKey("EspecialidadeId");

                    b.ToTable("Especialidade");
                });

            modelBuilder.Entity("ConsultaMedica.Api.Models.HorarioAtendimentoModel", b =>
                {
                    b.Property<int>("HorarioAtendimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiaSemana")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("HoraFim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("MedicoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("HorarioAtendimentoId");

                    b.HasIndex("MedicoId");

                    b.ToTable("HorarioAtendimento");
                });

            modelBuilder.Entity("ConsultaMedica.Api.Models.MedicoModel", b =>
                {
                    b.Property<int>("MedicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MedicoNome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroRegistroProfissional")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MedicoId");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("ConsultaMedica.Api.Models.PacienteModel", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HistoricoMedico")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroIdentificacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PacienteNome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PacienteId");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("ConsultaMedica.Api.Models.RecepcionistaModel", b =>
                {
                    b.Property<int>("RecepcionistaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumeroIdentificacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroTelefone")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecepcionistaNome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecepcionistaSobrenome")
                        .HasColumnType("TEXT");

                    b.HasKey("RecepcionistaId");

                    b.ToTable("Recepcionista");
                });

            modelBuilder.Entity("MedicoEspecialidade", b =>
                {
                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedicoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EspecialidadeId", "MedicoId");

                    b.HasIndex("MedicoId");

                    b.ToTable("MedicoEspecialidade");
                });

            modelBuilder.Entity("ConsultaMedica.Api.Models.ConsultaModel", b =>
                {
                    b.HasOne("ConsultaMedica.Api.Models.MedicoModel", "Medico")
                        .WithMany("Consultas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMedica.Api.Models.PacienteModel", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMedica.Api.Models.RecepcionistaModel", null)
                        .WithMany("Consultas")
                        .HasForeignKey("RecepcionistaModelRecepcionistaId");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ConsultaMedica.Api.Models.HorarioAtendimentoModel", b =>
                {
                    b.HasOne("ConsultaMedica.Api.Models.MedicoModel", "Medico")
                        .WithMany("HorariosAtendimento")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("MedicoEspecialidade", b =>
                {
                    b.HasOne("ConsultaMedica.Api.Models.EspecialidadeModel", null)
                        .WithMany()
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultaMedica.Api.Models.MedicoModel", null)
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultaMedica.Api.Models.MedicoModel", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("HorariosAtendimento");
                });

            modelBuilder.Entity("ConsultaMedica.Api.Models.PacienteModel", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("ConsultaMedica.Api.Models.RecepcionistaModel", b =>
                {
                    b.Navigation("Consultas");
                });
#pragma warning restore 612, 618
        }
    }
}
